{"version":3,"sources":["components/TodoForma.tsx","components/TodoList.tsx","components/MessageInput.tsx","components/MessageOutput.tsx","components/ContextMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoForma","props","useState","title","setTitle","className","onChange","event","target","value","console","log","type","id","placeholder","onKeyPress","key","onAdd","toLowerCase","TodoList","todos","onToggle","onContext","map","todo","classes","completed","push","onClick","bind","onContextMenu","preventDefault","x","pageX","y","pageY","join","MessageInput","addMessage","setNewMessage","input_text","time","Date","toString","split","splice","new_message_date","message","date","now","ref","current","useRef","cheking","match","setWikiText","inputSearch","result","exec","wiki_search","slice","index","trim","url","params","action","list","srsearch","format","Object","keys","forEach","fetch","then","response","json","query","search","length","snippet","catch","error","MessageOutput","container","msg","parse","ContextMenu","onRemove","showContext","style","top","left","App","setTodos","chatName_exist","newTodo","alert","prev","window","addEventListener","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50d23d5b.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ninterface TodoFormProps {\n    onAdd (title:string):void\n}\n\nexport const TodoForma: React.FC<TodoFormProps> = (props) => {\n  const [title, setTitle] = useState<string>('');\n\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    console.log(event);\n  };\n\n  const keyPressHandler = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      props.onAdd(title.toLowerCase());\n      setTitle('');\n    }\n  };\n\n  return (\n    <div className=\"input-field mt2 ml1\">\n      <input\n        onChange={changeHandler} \n        value={title}\n        type=\"text\"\n        id=\"title\"\n        placeholder=\"Input chat name\"\n        onKeyPress={keyPressHandler}\n      />\n\n    </div>\n  );\n};\n","import React from 'react';\nimport { ITodo } from '../interfaces';\n\ntype TodoListProps = {\n    todos: ITodo[],\n    onToggle(id:number):void,\n    onContext(id:number):void,\n    /* onRemove(id:number):void */\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  todos,\n  onToggle,\n  onContext,\n  /* onRemove */\n}) => (\n  <ul className=\"wh\">\n      {\n      todos.map((todo) => {\n      const classes = ['waves-effect waves-light btn wh'];\n      if (todo.completed) {\n        classes.push('teal accent-3');\n      }\n      return (\n        <li className=\"todo ml1\" key={todo.id} onClick={onToggle.bind(null, todo.id)} onContextMenu={\n          (event:React.MouseEvent)=>{event.preventDefault();\n             todo.x= event.pageX+\"px\";\n        todo.y=event.pageY+\"px\";\n        onContext(todo.id)}\n        }>\n          <span className={classes.join(' ')}>{todo.title}</span>\n        </li>\n\n      );\n    })}\n\n  </ul>\n\n)\n","import React, { useRef } from 'react';\nimport { IMessage_Date, ITodo } from '../interfaces';\n\ntype MessageInputProps = {\n  todos: ITodo[],\n  addMessage(msg: IMessage_Date): void\n}\n\nexport const MessageInput: React.FC<MessageInputProps> = ({\n  todos,\n  addMessage,\n}) => {\n\n  const setNewMessage = (input_text:string): void => {\n    const rightNow = new Date();\n    const time = rightNow.toString().split('').splice(16, 5);\n    const timeString = time[0] + time[1] + time[2] + time[3] + time[4];\n    const new_message_date: IMessage_Date = {\n      message: input_text,\n      date: timeString,\n      id: Date.now(),\n    };\n\n    ref.current!.value = '';\n\n    addMessage(new_message_date);\n  };\n\n  const ref = useRef<HTMLInputElement>(null);\n  const keyPressHandler = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      cheking ();\n    }\n  };\n\n  const onClickHandler = (event: React.MouseEvent<HTMLButtonElement>) => {\n    cheking();\n  };\n\n\n  const cheking = ():void => {\n    if (ref.current!.value !== '') {\n      if (ref.current!.value.match(/\\/wm/g)){\n        setWikiText(ref.current!.value);\n      }\n      else{\n        setNewMessage(ref.current!.value);\n      }\n    }\n\n  }\n\n  const setWikiText = (inputSearch:string):void => {\n    const result =  (/\\/wm/g).exec(inputSearch);\n    const wiki_search = inputSearch.slice(0,result!.index).trim();\n        let url = \"https://en.wikipedia.org/w/api.php\"; \n        url = url + \"?origin=*\";\n        const params:{[unit: string]: string;} = {\n          action: \"query\",\n          list: \"search\",\n          srsearch: wiki_search,\n          format: \"json\"\n      };\nObject.keys(params).forEach(function(key){url += \"&\" + key + \"=\" + params[key];});\n\n        fetch(url)\n            .then(function(response){return response.json();})\n            .then(function(response) {\n              if (response.query.search.length){\n                if (response.query.search[0].title === wiki_search){\n                    setNewMessage(response.query.search[0].snippet);\n                }else{\n                  setNewMessage(\"No match found!!!\");\n                }\n\n              }else{\n                setNewMessage(\"Incorrect input!!!\");\n\n              }\n                \n            })\n            .catch(function(error){console.log(error);});\n\n\n\n  }\n\n  return (\n    <div className=\"inputWrapper\">\n      <div className=\"input-field wh mt2 ml1\">\n        <input\n          ref={ref}\n          // onChange={changeHandler}\n          // value={title}\n          type=\"text\"\n          id=\"title2\"\n          placeholder=\"Input message\"\n          onKeyPress={keyPressHandler}\n        />\n\n      </div>\n      <button className=\"waves-effect waves-light btn enter_btn\" onClick={onClickHandler}>Enter</button>\n    </div>\n  );\n};\n","import React from 'react';\nimport parse from 'html-react-parser';\nimport { ITodo } from '../interfaces';\n\ntype MessageOutputProps = {\n    todos: ITodo[],\n\n}\n\nexport const MessageOutput: React.FC<MessageOutputProps> = ({ todos }) => (\n  <div className=\"MessageDiv\">\n    {todos.map((todo) => {\n      if (todo.completed) {\n        return todo.container.map((msg) => (\n          \n          <div className=\"Message\" key={msg.id}>\n            <div className=\"MessageInline\">\n            {parse(msg.message)}</div>\n          <div className=\"Date\">{msg.date}</div>\n          </div>\n        ));\n      }\n    })}\n  </div>\n);\n","import React from 'react';\r\nimport { ITodo } from '../interfaces';\r\n\r\ntype ContextMenuProps = {\r\n    todos: ITodo[],\r\n    onRemove(id:number):void\r\n}\r\n\r\nexport const ContextMenu: React.FC<ContextMenuProps> = ({\r\n  todos,\r\n  onRemove\r\n}) => (\r\n    <div>\r\n    {todos.map((todo) => {\r\n      if (todo.showContext) {\r\n          return (\r\n              <div className=\"custom_menu\" style={{ top: todo.y, left: todo.x }}>\r\n                  <div className=\"cm_item\" onClick={onRemove.bind(null, todo.id)}>Delete chat</div>\r\n                  <div className=\"cm_item\">Rename chat</div>\r\n                  \r\n              </div>\r\n          )\r\n      }\r\n\r\n    })}\r\n\r\n  </div>\r\n\r\n);","import React, { useState } from 'react';\nimport { TodoForma } from './components/TodoForma';\nimport { TodoList } from './components/TodoList';\nimport { IMessage_Date, ITodo } from './interfaces';\nimport { MessageInput } from './components/MessageInput';\nimport { MessageOutput } from './components/MessageOutput';\nimport { ContextMenu } from './components/ContextMenu';\n\nconst App: React.FC = () => {\n\n  const [todos, setTodos] = useState<ITodo[]>([]);\n\n  let chatName_exist:boolean = false;\n\n  const addHandler = (title:string) => {\n    const newTodo: ITodo = {\n      title,\n      id: Date.now(),\n      completed: false,\n      container: [],\n      showContext: false,\n      x:\"0px\",\n      y:\"0px\",\n\n    };\n    todos.map((todo) => {\n      if (todo.title === title) {\n        chatName_exist = true;\n        alert('Chat with same name already exist!!!');\n      }\n      return todos;\n    });\n\n    if (!chatName_exist) {\n      setTodos((prev) => [newTodo, ...prev]);\n    }\n    chatName_exist = false;\n  };\n\n  const toggleHandler = (id: number) => {\n    setTodos((prev) => prev.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      } return { ...todo, completed: false };\n    }));\n  };\n\n  const removeHandler = (id: number) => {\n    setTodos((prev) => prev.filter((todo) => todo.id !== id));\n  };\n\n  const addMessageHandler = (msg:IMessage_Date) => {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.completed) { todo.container.push(msg); }\n        return todo;\n      }),\n    );\n  };\n  const contextHandler = (id: number) => {\n    window.addEventListener(\"click\", ()=>{\n      setTodos((prev) => prev.map((todo) => {\n        if (todo.showContext === true) {\n          return {\n            ...todo,\n            showContext: false,\n          };\n        } return todo;\n      }));\n    }\n    )\n    \n      setTodos((prev) => prev.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            showContext: !todo.showContext,\n          };\n        } return { ...todo, showContext: false };\n      }));\n    };\n    \n    \n\n\n  \n\n  return (\n    <>\n\n      <div className=\"grid_wrapper\">\n        <div className=\"leftFrame_Input\">\n          <TodoForma onAdd={addHandler} />\n        </div>\n        <div className=\"leftFrame_ChatList\">\n          <TodoList todos={todos} onToggle={toggleHandler} onContext={contextHandler}/* onRemove={removeHandler} *//>\n          <ContextMenu todos={todos} onRemove={removeHandler}/>\n        </div>\n        <div className=\"rightFrame_Input\">\n          <MessageInput todos={todos} addMessage={addMessageHandler} />\n        </div>\n        <div className=\"rightFrame_Output\">\n          <MessageOutput todos={todos} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}