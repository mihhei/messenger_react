{"version":3,"sources":["components/TodoForma.tsx","components/TodoList.tsx","components/MessageInput.tsx","components/MessageOutput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoForma","props","useState","title","setTitle","className","onChange","event","target","value","type","id","placeholder","onKeyPress","key","onAdd","toLowerCase","TodoList","todos","onToggle","map","todo","classes","completed","push","onClick","bind","join","MessageInput","addMessage","setNewMessage","time","Date","toString","split","splice","timeString","new_message_date","message","ref","current","date","now","useRef","alert","MessageOutput","container","msg","App","setTodos","chatName_exist","newTodo","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.720e9221.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\ninterface TodoFormProps {\r\n    onAdd (title:string):void\r\n}\r\n\r\nexport const TodoForma: React.FC<TodoFormProps> = props => {\r\n    const [title, setTitle] = useState<string>('');\r\n\r\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.target.value);\r\n    }\r\n\r\n    const keyPressHandler = (event: React.KeyboardEvent) => {\r\n        if (event.key === \"Enter\") {\r\n            props.onAdd(title.toLowerCase());\r\n            setTitle('');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"input-field mt2 ml1\">\r\n            <input \r\n            onChange={changeHandler}\r\n            value={title}\r\n            type=\"text\" \r\n            id=\"title\" \r\n            placeholder=\"Input chat name\"\r\n            onKeyPress={keyPressHandler}\r\n            />\r\n    \r\n            \r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport { ITodo } from '../interfaces';\r\n\r\ntype TodoListProps = {\r\n    todos: ITodo[],\r\n    onToggle(id:number):void\r\n    /*onRemove(id:number):void*/\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({ \r\n    todos,\r\n    onToggle\r\n    /*onRemove*/\r\n }) => {\r\n\r\n    return (\r\n    <ul className=\"wh\">\r\n        {todos.map(todo=> {\r\n            const classes = ['waves-effect waves-light btn wh'];\r\n            if (todo.completed) {\r\n                classes.push('teal accent-3');\r\n                \r\n            }\r\n            return (\r\n                <li className=\"todo ml1\" key={todo.id} onClick={onToggle.bind(null,todo.id)}>\r\n                        <span className={classes.join(' ')} /*onClick={()=>onRemove(todo.id)}*/>{todo.title}</span>\r\n                </li>\r\n\r\n            )\r\n        })}\r\n       \r\n    </ul>\r\n\r\n    )\r\n}","import React, {useRef} from 'react';\r\nimport { IMessage_Date } from '../interfaces';\r\nimport { ITodo } from '../interfaces';\r\n\r\ntype MessageInputProps = {\r\n    todos: ITodo[],\r\n    addMessage (msg:IMessage_Date):void\r\n}\r\n\r\n\r\n\r\nexport const MessageInput: React.FC<MessageInputProps> = ({\r\n    todos,\r\n    addMessage\r\n    }) => {\r\n    const setNewMessage = ():void => {\r\n        let rightNow=new Date();\r\n        let time =rightNow.toString().split(\"\").splice(16,5);\r\n        let timeString =time[0]+time[1]+time[2]+time[3]+time[4];\r\n            const new_message_date: IMessage_Date = {\r\n                message:ref.current!.value,\r\n                date:timeString,\r\n                id:Date.now()\r\n            }\r\n            \r\n            ref.current!.value='';\r\n    \r\n            addMessage (new_message_date);\r\n            \r\n\r\n    }\r\n\r\n \r\n    const ref = useRef<HTMLInputElement>(null);\r\n    const keyPressHandler = (event: React.KeyboardEvent) => {\r\n        if (event.key === 'Enter') {\r\n            if (ref.current!.value===''){alert(\"Please enter message!!!\");\r\n        }else{ setNewMessage();\r\n            \r\n        }\r\n    }\r\n    }\r\n\r\n    const onClickHandler = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setNewMessage();\r\n    }\r\n    \r\n    return (\r\n        <div className=\"inputWrapper\">\r\n        <div className=\"input-field wh mt2 ml1\">\r\n            <input \r\n            ref={ref}\r\n            //onChange={changeHandler}\r\n            //value={title}\r\n            type=\"text\" \r\n            id=\"title2\" \r\n            placeholder=\"Input message\"\r\n            onKeyPress={keyPressHandler}\r\n            />\r\n    \r\n        </div>\r\n        <button className=\"waves-effect waves-light btn enter_btn\" onClick={onClickHandler}>Enter</button>\r\n        </div>\r\n    );\r\n\r\n}","import React from 'react';\r\nimport { ITodo } from '../interfaces';\r\n\r\ntype MessageOutputProps = {\r\n    todos: ITodo[],\r\n    \r\n}\r\n\r\nexport const MessageOutput: React.FC<MessageOutputProps> = ({todos}) => {\r\n\r\n\r\nreturn (\r\n    <ul className=\"messageDiv\">\r\n       {todos.map(todo=>{\r\n           if (todo.completed){\r\n               return todo.container.map(msg=> {\r\n                return (<li className=\"Message\" key={msg.id}>{msg.message}\r\n                <span className=\"Date\">{msg.date}</span></li>\r\n                )\r\n               })\r\n               }  \r\n           })\r\n           \r\n        }\r\n    </ul>\r\n  )  \r\n}\r\n\r\n","import React, {useState} from 'react';\nimport { TodoForma } from './components/TodoForma';\nimport { TodoList } from './components/TodoList';\nimport { IMessage_Date, ITodo } from './interfaces';\nimport { MessageInput } from './components/MessageInput';\nimport { MessageOutput } from './components/MessageOutput';\n\n\nconst App: React.FC = () => {\n\n   \nconst [todos, setTodos] = useState<ITodo[]>([]);\n\nlet chatName_exist:boolean = false;\n\nconst addHandler = (title:string) => {\n  const newTodo: ITodo = {\n    title:title,\n    id: Date.now(),\n    completed: false,\n    container: []\n    \n  }\n  todos.map(todo=> {\n    if (todo.title === title){chatName_exist=true;\n    alert(\"Chat with same name already exist!!!\");}\n    return todos;\n}); \n\nif (!chatName_exist){\n  setTodos(prev => [newTodo, ...prev]); \n  }\n  chatName_exist=false;\n  \n}\n\nconst toggleHandler = (id: number) => {\n  setTodos(prev => \n    prev.map(todo => {\n      if (todo.id === id){\n        return {...todo,\n        completed:!todo.completed}\n    }else{return {...todo, completed:false}}\n  })\n  )\n\n\n}\n\nconst removeHandler = (id: number) => {\n  setTodos(prev => prev.filter(todo=> todo.id !== id));\n\n}\n\nconst addMessageHandler = (msg:IMessage_Date) => {\n setTodos(\n   todos.map(todo => {\n      if (todo.completed){todo.container.push(msg)}\n        return todo;\n    }\n    ))\n}\n\n  \n\n  return (\n    <>\n    \n    <div className=\"grid_wrapper\">\n      <div className=\"leftFrame_Input\">\n      <TodoForma onAdd={addHandler}/>\n      </div>\n      <div className=\"leftFrame_ChatList\">\n      <TodoList todos={todos} onToggle={toggleHandler} /*onRemove={removeHandler}*//>\n      </div>\n      <div className=\"rightFrame_Input\">\n        <MessageInput todos={todos} addMessage={addMessageHandler}/>\n      </div>\n      <div className=\"rightFrame_Output MessageDiv\">\n        <MessageOutput todos={todos}/>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}